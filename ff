{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "084c522a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.stats import norm, t"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a501d151",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.17718780696593192"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def estimate_effect_size(std, n, alpha=0.05, power=0.8):\n",
    "    \"\"\"\n",
    "    Расчет MDE для контроля/пилота 50/50, одинаковые std и n\n",
    "    \n",
    "    :param std: стандартной отклонение одной группы\n",
    "    :param n: размер выбрки в одной группе\n",
    "    :return: MDE\n",
    "    \"\"\"\n",
    "    S = np.sqrt((std**2 / n) + (std**2 / n))\n",
    "    M = norm.ppf(q=1-alpha/2) + norm.ppf(q=power)\n",
    "    return M * S\n",
    "\n",
    "\n",
    "n = 500\n",
    "std = 1\n",
    "estimate_effect_size(std, n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79987cca",
   "metadata": {},
   "source": [
    "То есть `effect_size` < 0.17 будет обладать мощностью меньше 80%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4db9bce9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "500.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def estimate_sample_size(effect_size, std, alpha=0.05, power=0.8):\n",
    "    \"\"\"\n",
    "    Расчет N для контроля/пилота 50/50, одинаковые std и n\n",
    "    :param std: ско одной группы\n",
    "    :param effect_size: ожидаемое изменение метрики\n",
    "    :return: N для одной группы\n",
    "    \"\"\"\n",
    "    M = (norm.ppf(q=1-alpha/2) + norm.ppf(q=power))**2\n",
    "    return 2 * M * std**2 / effect_size**2 \n",
    "\n",
    "effect_size = 0.17718780696593192\n",
    "std = 1\n",
    "estimate_sample_size(effect_size, std)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "997c0e49",
   "metadata": {},
   "source": [
    "Есть специальная функция !"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6d1c8d99",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.power import tt_ind_solve_power "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f6b75a1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "estimate_sample_size: 500.0\n",
      "estimate_effect_size: 0.17718780696593192\n",
      "tt_ind_solve_power nobs: 500.96095684136526\n",
      "tt_ind_solve_power effect_size: 0.17735842307242328\n",
      "\n"
     ]
    }
   ],
   "source": [
    "n = 500\n",
    "alpha = 0.05\n",
    "power = 0.8\n",
    "sd = 1\n",
    "effect_size = 0.17718780696593192\n",
    "\n",
    "print(f\"\"\"\n",
    "estimate_sample_size: {estimate_sample_size(effect_size, sd)}\n",
    "estimate_effect_size: {estimate_effect_size(sd, n)}\n",
    "tt_ind_solve_power nobs: {\n",
    "    tt_ind_solve_power(\n",
    "        effect_size=effect_size,\n",
    "        alpha=alpha, \n",
    "        power=power, \n",
    "        ratio=1\n",
    "    )\n",
    "}\n",
    "tt_ind_solve_power effect_size: {\n",
    "    tt_ind_solve_power(\n",
    "        nobs1=n, \n",
    "        alpha=alpha, \n",
    "        power=power, \n",
    "        ratio=1\n",
    "    )\n",
    "}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9b219fc",
   "metadata": {},
   "source": [
    "_____________________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f807aee",
   "metadata": {},
   "source": [
    "Критерий Стьюдента (t-test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8a68c170",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T-score:  -0.8203000819553226\n",
      "T-critical:  1.9872898646909385\n",
      "P_value:  1.5857384985085499\n",
      "Confidence Interval of 2 sample Z-test:  [-0.68  0.28]\n"
     ]
    }
   ],
   "source": [
    "N_a = 20\n",
    "df_a = N_a - 1 # Кол-во степеней свободы для контрольной группы А\n",
    "N_b = 70 # варьируем\n",
    "df_b = N_b - 1 # Кол-во степеней свободы для экспериментальной группы B\n",
    "\n",
    "# Уровень значимости\n",
    "alpha = 0.05\n",
    "\n",
    "# Генерируем t-распределение с параметрами контрольной группы А\n",
    "X_a = np.random.standard_t(df_a,N_a)\n",
    "# Генерируем t-распределение с параметрами экспериментальной группы B\n",
    "X_b = np.random.standard_t(df_b,N_b)\n",
    "\n",
    "# Среднее значение метрики в контрольной группе А\n",
    "mu_a = np.mean(X_a)\n",
    "# Среднее значение метрики в экспериментальной группе B\n",
    "mu_b = np.mean(X_b)\n",
    "\n",
    "# Выборочная дисперсия метрики в контрольной группе А\n",
    "sigma_sqr_a = np.var(X_a)\n",
    "# Выборочная дисперсия метрики в экспериментальной группе B\n",
    "sigma_sqr_b = np.var(X_b)\n",
    "\n",
    "# Взвещенная выборочная дисперсия \n",
    "pooled_variance_t_test = (\n",
    "    (N_a-1)*sigma_sqr_a + (N_b -1) * sigma_sqr_b\n",
    ")/(N_a + N_b-2)*(1/N_a + 1/N_b)\n",
    "\n",
    "# Взвещенное выборочное стандартное отклонение\n",
    "SE = np.sqrt(pooled_variance_t_test)\n",
    "\n",
    "# Тестовая статистика\n",
    "T = (mu_a-mu_b)/SE\n",
    "\n",
    "# Критическое значение теста для 2-сторонней гипотезы (распределение стьюдента)\n",
    "t_crit = t.ppf(1-alpha/2, N_a + N_b - 2)\n",
    "\n",
    "# P-value для 2-сторонней гипотезы (симметрично)\n",
    "p_value = t.sf(T, N_a + N_b - 2)*2\n",
    "\n",
    "# Отклонение\n",
    "margin_error = t_crit * SE\n",
    "# Доверительный интервал\n",
    "CI = [(mu_a-mu_b) - margin_error, (mu_a-mu_b) + margin_error]\n",
    "\n",
    "print(\"T-score: \", T)\n",
    "print(\"T-critical: \", t_crit)\n",
    "print(\"P_value: \", p_value)\n",
    "print(\"Confidence Interval of 2 sample Z-test: \", np.round(CI,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "19c4183b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import ttest_ind, mannwhitneyu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "98aed980",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=-0.810432903896122, pvalue=0.41987770165199756)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ttest_ind(\n",
    "    X_a, \n",
    "    X_b,\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e15e18e",
   "metadata": {},
   "source": [
    "Непараметрический тест Манна-Уитни"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cd65491f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MannwhitneyuResult(statistic=604.0, pvalue=0.17700230647605086)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mannwhitneyu(\n",
    "    X_a, \n",
    "    X_b,\n",
    "#     nan_policy='propagate',\n",
    "#     alternative='two-sided'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c37e1c9",
   "metadata": {},
   "source": [
    "`p-val` > 0.05  ==> H0 принимаем на этом уровне значимости => различий стат-значимых нет"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a763c34e",
   "metadata": {},
   "source": [
    "________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "26c6bbc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "reject the null\n",
      "7.832495206930039e-11\n",
      "Test Statistics stat:  6.503782823926798\n",
      "Z-critical:  1.959963984540054\n",
      "P_value:  7.832495206930039e-11\n",
      "Confidence Interval of 2 sample Z-test for proportions:  [0.02 0.04]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_a = 1242 # кол-во кликов в контрольной группе А\n",
    "N_a = 9886 # кол-во показов в контрольной группе А\n",
    "X_b = 974 # кол-во кликов в экспериментальной группе B\n",
    "N_b = 10072  # кол-во показов в экспериментальной группе B\n",
    "\n",
    "# Уровень значимости\n",
    "alpha = 0.05\n",
    "\n",
    "p_a_hat = X_a / N_a\n",
    "p_b_hat = X_b / N_b\n",
    "\n",
    "p_pooled_hat = (X_a + X_b)/(N_a + N_b)\n",
    "pooled_variance = p_pooled_hat*(1-p_pooled_hat) * (1/N_a + 1/N_b)\n",
    "\n",
    "# Выборочное стандартное отклонение\n",
    "SE = np.sqrt(pooled_variance)\n",
    "\n",
    "# Тестовая статистика\n",
    "Test_stat = (p_a_hat - p_b_hat)/SE\n",
    "# Критическое значение теста для 2-сторонней гипотезы (из норм распределения)\n",
    "Z_crit = norm.ppf(1-alpha/2)\n",
    "\n",
    "# Отклонение (ширина доверительного интервала)\n",
    "# P-value для 2-сторонней гипотезы (симметрично)=> умножаем на два (для правой и левой крит-области)\n",
    "p_value = norm.sf(Test_stat)*2\n",
    "\n",
    "# Доверительный интервал\n",
    "CI = [(p_a_hat-p_b_hat) - SE * Z_crit, (p_a_hat-p_b_hat) + SE * Z_crit]\n",
    "\n",
    "if np.abs(Test_stat) >= Z_crit:\n",
    "    print(\"reject the null\")\n",
    "    print(p_value)\n",
    "\n",
    "print(\"Test Statistics stat: \", Test_stat)\n",
    "print(\"Z-critical: \", Z_crit)\n",
    "print(\"P_value: \", p_value)\n",
    "print(\"Confidence Interval of 2 sample Z-test for proportions: \", np.round(CI,2))\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "z = np.arange(-3,3,  0.1)\n",
    "plt.plot(z, norm.pdf(z), label = 'Standard Normal Distribution',color = 'red',linewidth = 2.5)\n",
    "plt.fill_between(z[z>Z_crit], norm.pdf(z[z>Z_crit]), label = 'Right Rejection Region',color ='y' )\n",
    "plt.fill_between(z[z<(-1)*Z_crit], norm.pdf(z[z<(-1)*Z_crit]), label = 'Left Rejection Region',color ='y' )\n",
    "plt.title(\"Two Sample Z-test rejection region\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ffa67f4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.12563220716164272, 0.09670373312152503)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_a_hat, p_b_hat "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "59a6c84a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.proportion import proportions_ztest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3f5b4109",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_stat, p_value = proportions_ztest(np.array([X_a, X_b]), np.array([N_a, N_b]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1d0b9df9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.832495206930039e-11"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8802cce",
   "metadata": {},
   "source": [
    "____________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cc272f9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66548bbc",
   "metadata": {},
   "source": [
    "____________________________________________________________________________________________________________"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8471eff5",
   "metadata": {},
   "source": [
    "# Sampling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9ad5fd9",
   "metadata": {},
   "source": [
    "### Random Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "51019cfe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 7.6845907 , 12.51819508,  8.65349578, ...,  8.73700008,\n",
       "        12.02603009,  9.89662184]),\n",
       " array([ 9.38587232,  9.05241074, 11.04545277, ...,  6.65061546,\n",
       "        11.45790378, 10.5761622 ]),\n",
       " 3000,\n",
       " 3000)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N = 10000\n",
    "mu = 10\n",
    "std = 2\n",
    "population_df = np.random.normal(mu,std,N)\n",
    "\n",
    "def random_sampling(df, n):\n",
    "    random_sample = np.random.choice(df, replace = True, size = n)\n",
    "    return(random_sample)\n",
    "n = 3000\n",
    "random_sample_1 = random_sampling(population_df, n)\n",
    "random_sample_2 = random_sampling(population_df, n)\n",
    "random_sample_1, random_sample_2, len(random_sample_1), len(random_sample_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9bcefd4",
   "metadata": {},
   "source": [
    "### Systematic Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "69f93837",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(          id       data\n",
       " 1        2.0   6.070384\n",
       " 1001  1002.0   6.101274\n",
       " 2001  2002.0   7.131032\n",
       " 3001  3002.0  12.111854\n",
       " 4001  4002.0  11.964387\n",
       " 5001  5002.0   8.581882\n",
       " 6001  6002.0   6.035390\n",
       " 7001  7002.0   8.546485\n",
       " 8001  8002.0   9.200488\n",
       " 9001  9002.0  11.688597,\n",
       "           id       data\n",
       " 1        2.0   6.070384\n",
       " 501    502.0  13.499480\n",
       " 1001  1002.0   6.101274\n",
       " 1501  1502.0   9.317947\n",
       " 2001  2002.0   7.131032\n",
       " 2501  2502.0   6.545273\n",
       " 3001  3002.0  12.111854\n",
       " 3501  3502.0   8.421779\n",
       " 4001  4002.0  11.964387\n",
       " 4501  4502.0  10.232885\n",
       " 5001  5002.0   8.581882\n",
       " 5501  5502.0   8.017922\n",
       " 6001  6002.0   6.035390\n",
       " 6501  6502.0  10.392968\n",
       " 7001  7002.0   8.546485\n",
       " 7501  7502.0  12.259444\n",
       " 8001  8002.0   9.200488\n",
       " 8501  8502.0  12.306609\n",
       " 9001  9002.0  11.688597\n",
       " 9501  9502.0   9.954870)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N = 10000\n",
    "mu = 10\n",
    "std = 2\n",
    "population_df = np.random.normal(mu, std, N)\n",
    "\n",
    "def systematic_sampling(df, step):\n",
    "    id = pd.Series(np.arange(1,len(df),1))\n",
    "    df = pd.Series(df)\n",
    "    df_pd = pd.concat([id, df], axis = 1)\n",
    "    df_pd.columns = [\"id\", \"data\"]\n",
    "    \n",
    "    selected_index = np.arange(1, len(df), step)\n",
    "    \n",
    "    systematic_sampling = df_pd.iloc[selected_index]\n",
    "    return(systematic_sampling)\n",
    "\n",
    "n_1 = 10\n",
    "n_2 = 20\n",
    "step_1 = int(N/n_1)\n",
    "step_2 = int(N/n_2)\n",
    "sample_1 = systematic_sampling(population_df, step_1)\n",
    "sample_2 = systematic_sampling(population_df, step_2)\n",
    "sample_1, sample_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13c97f92",
   "metadata": {},
   "source": [
    "### Cluster Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "237713df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>price</th>\n",
       "      <th>event_type</th>\n",
       "      <th>click</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3.344918</td>\n",
       "      <td>type1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2.401037</td>\n",
       "      <td>type2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1.438926</td>\n",
       "      <td>type1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3.879434</td>\n",
       "      <td>type1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>3.688545</td>\n",
       "      <td>type2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>9995</td>\n",
       "      <td>3.594442</td>\n",
       "      <td>type1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>9996</td>\n",
       "      <td>1.130378</td>\n",
       "      <td>type2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>9997</td>\n",
       "      <td>2.106538</td>\n",
       "      <td>type1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>9998</td>\n",
       "      <td>2.824972</td>\n",
       "      <td>type2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>9999</td>\n",
       "      <td>3.031426</td>\n",
       "      <td>type1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        id     price event_type  click\n",
       "0        0  3.344918      type1      1\n",
       "1        1  2.401037      type2      0\n",
       "2        2  1.438926      type1      0\n",
       "3        3  3.879434      type1      0\n",
       "4        4  3.688545      type2      1\n",
       "...    ...       ...        ...    ...\n",
       "9995  9995  3.594442      type1      0\n",
       "9996  9996  1.130378      type2      1\n",
       "9997  9997  2.106538      type1      1\n",
       "9998  9998  2.824972      type2      1\n",
       "9999  9999  3.031426      type1      0\n",
       "\n",
       "[10000 rows x 4 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_vb = pd.Series(np.random.uniform(1,4,size = N))\n",
    "id = pd.Series(np.arange(0,len(price_vb),1))\n",
    "event_type = pd.Series(np.random.choice([\"type1\",\"type2\",\"type3\"],size = len(price_vb)))\n",
    "click = pd.Series(np.random.choice([0,1],size = len(price_vb)))\n",
    "df = pd.concat([id,price_vb,event_type, click],axis = 1)\n",
    "df.columns = [\"id\",\"price\",\"event_type\", \"click\"]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d567fe44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(        id     price event_type  click  cluster\n",
       " 1990  1990  1.898071      type2      1       45\n",
       " 1432  1432  3.494080      type3      1       45\n",
       " 1433  1433  1.206759      type2      1       45\n",
       " 2392  2392  3.138564      type2      1       45\n",
       " 7326  7326  2.902839      type1      1       45\n",
       " ...    ...       ...        ...    ...      ...\n",
       " 913    913  3.147553      type3      1       53\n",
       " 5526  5526  2.235462      type2      1       53\n",
       " 7613  7613  2.151988      type3      1       53\n",
       " 8881  8881  2.523236      type3      0       53\n",
       " 2347  2347  3.971776      type3      1       53\n",
       " \n",
       " [200 rows x 5 columns],\n",
       "         id     price event_type  click  cluster\n",
       " 4370  4370  3.363576      type2      0        5\n",
       " 1598  1598  2.275937      type2      0        5\n",
       " 1991  1991  1.834692      type2      0        5\n",
       " 3511  3511  3.231815      type1      0        5\n",
       " 651    651  3.453516      type1      1        5\n",
       " ...    ...       ...        ...    ...      ...\n",
       " 7196  7196  1.950857      type2      1       85\n",
       " 5991  5991  3.019361      type3      0       85\n",
       " 8839  8839  3.640643      type1      0       85\n",
       " 7587  7587  3.649884      type3      0       85\n",
       " 9237  9237  1.173492      type1      1       85\n",
       " \n",
       " [200 rows x 5 columns])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_clustered_Sample(df, n_per_cluster, num_select_clusters):\n",
    "    N = len(df)\n",
    "    K = int(N/n_per_cluster)\n",
    "    data = None\n",
    "    for k in range(K):\n",
    "        sample_k = df.sample(n_per_cluster)\n",
    "        sample_k[\"cluster\"] = np.repeat(k,len(sample_k))\n",
    "        df = df.drop(index = sample_k.index)\n",
    "        data = pd.concat([data,sample_k],axis = 0)\n",
    "\n",
    "    random_chosen_clusters = np.random.randint(0, K, size = num_select_clusters)\n",
    "    samples = data[data.cluster.isin(random_chosen_clusters)]\n",
    "    return(samples)\n",
    "\n",
    "sample_1 = get_clustered_Sample(df = df, n_per_cluster = 100, num_select_clusters = 2)\n",
    "sample_2 = get_clustered_Sample(df = df, n_per_cluster = 100, num_select_clusters = 2)\n",
    "sample_1, sample_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5263e397",
   "metadata": {},
   "source": [
    "### Weighted Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f4ed4163",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(                 id     price event_type  click\n",
       " event_type                                     \n",
       " type1      0   3149  3.757447      type1      1\n",
       "            1   2720  1.731839      type1      0\n",
       "            2   4264  2.928781      type1      0\n",
       "            3   3947  1.762617      type1      1\n",
       "            4   5111  2.225568      type1      1\n",
       " ...             ...       ...        ...    ...\n",
       " type3      29  3394  1.601427      type3      0\n",
       "            30   489  1.100031      type3      0\n",
       "            31  6826  2.791668      type3      1\n",
       "            32  4856  3.212495      type3      0\n",
       "            33  6748  3.876364      type3      1\n",
       " \n",
       " [100 rows x 4 columns],\n",
       "                  id     price event_type  click\n",
       " event_type                                     \n",
       " type1      0   3707  3.513193      type1      1\n",
       "            1   9465  2.132175      type1      0\n",
       "            2   9739  1.757025      type1      0\n",
       "            3   3347  1.691976      type1      1\n",
       "            4   3381  3.753840      type1      1\n",
       " ...             ...       ...        ...    ...\n",
       " type3      29   599  2.375291      type3      0\n",
       "            30  7508  1.005547      type3      1\n",
       "            31  2211  3.495761      type3      1\n",
       "            32  6204  1.753621      type3      1\n",
       "            33  7999  2.481693      type3      1\n",
       " \n",
       " [100 rows x 4 columns])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_weighted_sample(df,n):\n",
    "    def get_class_prob(x):\n",
    "        weight_x = int(np.rint(n * len(x[x.click != 0]) / len(df[df.click != 0])))\n",
    "        sampled_x = x.sample(weight_x).reset_index(drop=True)\n",
    "        return (sampled_x)\n",
    "\n",
    "    weighted_sample = df.groupby('event_type').apply(get_class_prob)\n",
    "#     print(weighted_sample[\"event_type\"].value_counts())\n",
    "    return (weighted_sample)\n",
    "\n",
    "sample_1 = get_weighted_sample(df, 100)\n",
    "sample_2 = get_weighted_sample(df, 100)\n",
    "sample_1, sample_2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84d0ebf6",
   "metadata": {},
   "source": [
    "### Stratified Sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d9f4d85b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(      id     price event_type  click  cluster\n",
       " 0   8358  3.834096      type1      0        0\n",
       " 1   6653  2.262556      type1      1        0\n",
       " 2   7599  2.629637      type1      1        0\n",
       " 3   5346  1.869143      type1      0        0\n",
       " 4    139  1.590837      type1      1        0\n",
       " ..   ...       ...        ...    ...      ...\n",
       " 95  8203  3.515044      type3      0       49\n",
       " 96  3151  1.520177      type3      0       49\n",
       " 97  4229  1.209915      type3      1       49\n",
       " 98  6395  2.948647      type3      0       49\n",
       " 99  4185  1.229477      type3      1       49\n",
       " \n",
       " [200 rows x 5 columns],\n",
       "       id     price event_type  click  cluster\n",
       " 0    354  3.756202      type1      1       15\n",
       " 1   9623  3.972615      type1      1       15\n",
       " 2   3127  1.888110      type1      1       15\n",
       " 3   6846  3.688136      type1      0       15\n",
       " 4   4942  3.438215      type1      1       15\n",
       " ..   ...       ...        ...    ...      ...\n",
       " 95  6232  2.832343      type3      1       28\n",
       " 96  8371  2.084039      type3      0       28\n",
       " 97  5758  2.858808      type3      0       28\n",
       " 98  7197  2.807413      type3      0       28\n",
       " 99   728  2.339543      type3      1       28\n",
       " \n",
       " [200 rows x 5 columns])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_startified_sample(df,n,num_clusters_needed):\n",
    "    N = len(df)\n",
    "    num_obs_per_cluster = int(N/n)\n",
    "    K = int(N/num_obs_per_cluster)\n",
    "\n",
    "    def get_weighted_sample(df,num_obs_per_cluster):\n",
    "        def get_sample_per_class(x):\n",
    "            n_x = int(np.rint(num_obs_per_cluster*len(x[x.click !=0])/len(df[df.click !=0])))\n",
    "            sample_x = x.sample(n_x)\n",
    "            return(sample_x)\n",
    "        weighted_sample = df.groupby(\"event_type\").apply(get_sample_per_class)\n",
    "        return(weighted_sample)\n",
    "\n",
    "    stratas = None\n",
    "    for k in range(K):\n",
    "        weighted_sample_k = get_weighted_sample(df, num_obs_per_cluster).reset_index(drop = True)\n",
    "        weighted_sample_k[\"cluster\"] = np.repeat(k,len(weighted_sample_k))\n",
    "        stratas = pd.concat([stratas, weighted_sample_k],axis = 0)\n",
    "        df.drop(index = weighted_sample_k.index)\n",
    "    selected_strata_clusters = np.random.randint(0, K, size = num_clusters_needed)\n",
    "    stratified_samples = stratas[stratas.cluster.isin(selected_strata_clusters)]\n",
    "    return(stratified_samples)\n",
    "\n",
    "sample_1 = get_startified_sample(df = df, n = 100, num_clusters_needed = 2)\n",
    "sample_2 = get_startified_sample(df = df, n = 100, num_clusters_needed = 2)\n",
    "sample_1, sample_2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "861250b8",
   "metadata": {},
   "source": [
    "# Bootstrap "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "557544b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      0           1\n",
      "0   211  Experiment\n",
      "1   217  Experiment\n",
      "2   205  Experiment\n",
      "3   197  Experiment\n",
      "4   213  Experiment\n",
      "..  ...         ...\n",
      "95  223     Control\n",
      "96  218     Control\n",
      "97  210     Control\n",
      "98  211     Control\n",
      "99  214     Control\n",
      "\n",
      "[100 rows x 2 columns]\n",
      "Mean of X_bar_exp - X_bar_con -1.009815462440855\n",
      "Standard Error of X_bar_exp - X_bar_con 0.23205897828131483\n",
      "CI of X_bar_exp - X_bar_con [-1.4646427021613948, -0.5549882227203153]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 100\n",
    "X = pd.Series(np.random.binomial(300, 0.7, size = N))\n",
    "Y_a, Y_b = np.repeat(\"Experiment\",N/2), np.repeat(\"Control\", N/2)\n",
    "N_a, N_b = len(Y_a), len(Y_b)\n",
    "\n",
    "Y = pd.Series(np.append(Y_a, Y_b))\n",
    "data = pd.concat([X,Y],axis = 1)\n",
    "print(data)\n",
    "means_per_group = data.groupby(1, group_keys = False)[0].mean()\n",
    "medians_per_group = data.groupby(1)[0].median()\n",
    "\n",
    "alpha = 0.05\n",
    "def bootstrap(data, b_iter):\n",
    "    boot_mean_diff = []\n",
    "    boot_medians_diff = []\n",
    "\n",
    "    boot_means_a = []\n",
    "    boot_means_b = []\n",
    "\n",
    "    count_num_positives_meandiff = 0\n",
    "    count_num_positives_mediandiff = 0\n",
    "\n",
    "    for i in range(b_iter):\n",
    "\n",
    "        boot_sample = data.sample(frac = 1, replace = True)\n",
    "\n",
    "        # Выборочное среднее на этой итерации bootstrap для A и B группы\n",
    "        boot_means_per_group = boot_sample.groupby(1)[0].mean()\n",
    "        boot_sample_mean_a = boot_means_per_group[\"Control\"]\n",
    "        boot_sample_mean_b = boot_means_per_group[\"Experiment\"]\n",
    "\n",
    "        boot_means_a.append(boot_sample_mean_a)\n",
    "        boot_means_b.append(boot_sample_mean_b)\n",
    "\n",
    "        # Разность выборочных средних между группами А и B на этой итерации bootstrap\n",
    "        diff_means = boot_sample_mean_b - boot_sample_mean_a\n",
    "\n",
    "        # Считаем кол-во итераций, когда разность средих была положительна\n",
    "        if diff_means > 0:\n",
    "            count_num_positives_meandiff += 1\n",
    "\n",
    "        # Считаем медианы по группам контроля / воздействия\n",
    "        boot_medians_per_group = boot_sample.groupby(1)[0].median()\n",
    "\n",
    "        # Считаем кол-во итераций, когда разность медиан была положительна\n",
    "        diff_medians = boot_medians_per_group[\"Experiment\"] - boot_medians_per_group[\"Control\"]\n",
    "        if diff_medians > 0:\n",
    "            count_num_positives_mediandiff += 1\n",
    "\n",
    "        boot_mean_diff.append(diff_means)\n",
    "        boot_medians_diff.append(diff_medians)\n",
    "\n",
    "    return(\n",
    "        boot_means_a,\n",
    "        boot_means_b,\n",
    "        count_num_positives_meandiff,\n",
    "        count_num_positives_mediandiff,\n",
    "        boot_mean_diff\n",
    "    )\n",
    "\n",
    "b_iter = 5000\n",
    "X_bars_a, X_bars_b , n_means, n_medians, boot_mean_diff = bootstrap(data, b_iter)\n",
    "Z_mean = np.mean(X_bars_b)- np.mean(X_bars_a)\n",
    "Z_sigma = np.sqrt((np.var(X_bars_b)/N_b + np.var(X_bars_a)/N_a))\n",
    "CI = [Z_mean - norm.ppf(1-alpha/2)*Z_sigma, Z_mean + norm.ppf(1-alpha/2)*Z_sigma]\n",
    "\n",
    "print(\"Mean of X_bar_exp - X_bar_con\", Z_mean)\n",
    "print(\"Standard Error of X_bar_exp - X_bar_con\", Z_sigma)\n",
    "print(\"CI of X_bar_exp - X_bar_con\", CI)\n",
    "\n",
    "p_value_diff_means = n_means/b_iter\n",
    "p_value_diff_medians = n_medians/b_iter\n",
    "\n",
    "CI = np.percentile(boot_mean_diff, [2.5, 97.5])\n",
    "\n",
    "counts, bins, ignored = plt.hist(\n",
    "    boot_mean_diff, 50,\n",
    "    density = True,\n",
    "    color = 'red'\n",
    ")\n",
    "plt.xlabel(\"Величина разности средних\")\n",
    "plt.title(\"Распределение разности средних между группами\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e9d025f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "import datetime\n",
    "import os\n",
    "import scipy.stats as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "71b88ece",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_data():\n",
    "    ''' Функция, генерирующая трафик магазинов по дням с 2019-01-01 по 2019-06-39'''\n",
    "\n",
    "    ID = random.sample(range(1000001, 100000001), 1000)  # Генерируем уникальные id (восьмизначные числа) для 1'000 магазинов\n",
    "\n",
    "    mean_daily = 600    # Исходя из того, что в магазины из крупных сетей (около 10'000 магазинов) ежедневный поток\n",
    "                        # покупателей (далее трафик - traffic) в среднем составляет 1300 человек, предположим, что\n",
    "                        # для сети в 1'000 магазинов траффик меньше примерно в два раза (из-за убывающей отдачи от масштаба), \n",
    "                        # то есть в среднем составляет 600 человек/день\n",
    "\n",
    "    # Теперь предположим, что ввиду того, что сеть магазинов большая, у каждого магазина есть постоянный и достаточно \n",
    "    # стабильный трафик (то есть небольшое стандартное отклонение). Магазины могут быть разными по величине, поэтому \n",
    "    # возьмем нормальное распределение по объемам трафика со средним mean_daily и std = 10% от mean_daily\n",
    "    mean_for_each_id = np.random.normal(loc = mean_daily, scale = 0.1 * mean_daily, size = 1000)\n",
    "\n",
    "    # Составим датафрейм со средними значениями трафика для каждого магазина.\n",
    "    traffic_conf_int = pd.DataFrame({'mean_traffic': np.array(list(map(int, mean_for_each_id))),\n",
    "                                    'lower_bound': np.zeros(len(mean_for_each_id)),\n",
    "                                    'upper_bound': np.zeros(len(mean_for_each_id)),}, index = ID)\n",
    "\n",
    "    # Сгенерируем нижнюю и верхнюю границы доверительных интервалов, в которых будет колебаться трафик в каждом магазине\n",
    "    traffic_conf_int['lower_bound'] = traffic_conf_int['mean_traffic'].map(lambda i: st.norm.interval(0.95,\n",
    "                                                                                                    loc = i,\n",
    "                                                                                                    scale = 0.1 * i)[0]).map(int)\n",
    "    traffic_conf_int['upper_bound'] = traffic_conf_int['mean_traffic'].map(lambda i: st.norm.interval(0.95,\n",
    "                                                                                                    loc = i,\n",
    "                                                                                                    scale = 0.1 * i)[1]).map(int)\n",
    "\n",
    "    # Генерируем данные в промежутке от 2019-01-01 до 2019-06-30.\n",
    "    date_start = datetime.datetime(2019, 1, 1)\n",
    "    date_end = datetime.datetime(2019, 6, 30)\n",
    "    date_index = pd.date_range(date_start, date_end)\n",
    "\n",
    "    # Создаем для датафрейм дневного трафика в каждом магазине за рассматриваемый промежуток времени.\n",
    "    right_indexes = pd.MultiIndex.from_product([ID, date_index.to_list()], names=['id', 'date'])\n",
    "\n",
    "    daily_df = pd.DataFrame({'traffic': np.zeros(len(right_indexes))}, index = right_indexes).reset_index()\n",
    "\n",
    "    # Соединяем два полученных датафрейма, чтобы сгенерировать случайный дневной трафик для каждого магазина в\n",
    "    # пределах его доверительного интервала.\n",
    "    merged_df = pd.merge(daily_df, traffic_conf_int, left_on = 'id', right_index = True, how = 'left', sort=False)\n",
    "\n",
    "    def foo(x):\n",
    "        ''' Функция выдает случайное число типа int в границах заданного доверительного интервала'''\n",
    "    \n",
    "        traffic = random.randint(merged_df['lower_bound'][x], merged_df['upper_bound'][x])\n",
    "        return traffic\n",
    "\n",
    "    # Для каждого магазина генерируем дневной трафик.\n",
    "    merged_df['traffic'] = merged_df['traffic'].map(foo)\n",
    "\n",
    "    # Из полученного датафрейма merged_df убираем лишние колонки и получаем готовый сгенерированный датафрейм.\n",
    "    generated_df = merged_df.drop(['mean_traffic', 'lower_bound', 'upper_bound'], axis = 1)\n",
    "\n",
    "    return generated_df \n",
    "\n",
    "\n",
    "generated_df = generate_data()\n",
    "# linearized_df = linearize_data(generated_df = generated_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d41b4895",
   "metadata": {},
   "outputs": [],
   "source": [
    "generated_df['period'] = ''\n",
    "generated_df.loc[generated_df['date'] >= '2019-04-01','period'] = 'after'\n",
    "generated_df.loc[generated_df['date'] < '2019-04-01','period'] = 'before'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ec160b50",
   "metadata": {},
   "outputs": [],
   "source": [
    "dict_ = {\n",
    "    0: [],\n",
    "    1: []\n",
    "}\n",
    "for i in list(generated_df.id.unique()):\n",
    "    grp = int(np.random.randint(0, 2, 1))\n",
    "    dict_[grp].append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "370b8466",
   "metadata": {},
   "outputs": [],
   "source": [
    "generated_df.loc[generated_df['id'].isin(dict_[0]), 'group'] = 'A'\n",
    "generated_df.loc[generated_df['id'].isin(dict_[1]), 'group'] = 'B'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8522a725",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_t = (\n",
    "    generated_df\n",
    "    .groupby(['date', 'group', 'period'])\n",
    "    .agg(\n",
    "        {'traffic': sum}\n",
    "    )\n",
    "    .reset_index()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2cc9a6be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>period</th>\n",
       "      <th>traffic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>A</td>\n",
       "      <td>before</td>\n",
       "      <td>313724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>B</td>\n",
       "      <td>before</td>\n",
       "      <td>281426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>A</td>\n",
       "      <td>before</td>\n",
       "      <td>315437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>B</td>\n",
       "      <td>before</td>\n",
       "      <td>281474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>A</td>\n",
       "      <td>before</td>\n",
       "      <td>315178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>357</th>\n",
       "      <td>2019-06-28</td>\n",
       "      <td>B</td>\n",
       "      <td>after</td>\n",
       "      <td>282630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>2019-06-29</td>\n",
       "      <td>A</td>\n",
       "      <td>after</td>\n",
       "      <td>310534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>2019-06-29</td>\n",
       "      <td>B</td>\n",
       "      <td>after</td>\n",
       "      <td>282663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>360</th>\n",
       "      <td>2019-06-30</td>\n",
       "      <td>A</td>\n",
       "      <td>after</td>\n",
       "      <td>316572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>361</th>\n",
       "      <td>2019-06-30</td>\n",
       "      <td>B</td>\n",
       "      <td>after</td>\n",
       "      <td>286249</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>362 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          date group  period  traffic\n",
       "0   2019-01-01     A  before   313724\n",
       "1   2019-01-01     B  before   281426\n",
       "2   2019-01-02     A  before   315437\n",
       "3   2019-01-02     B  before   281474\n",
       "4   2019-01-03     A  before   315178\n",
       "..         ...   ...     ...      ...\n",
       "357 2019-06-28     B   after   282630\n",
       "358 2019-06-29     A   after   310534\n",
       "359 2019-06-29     B   after   282663\n",
       "360 2019-06-30     A   after   316572\n",
       "361 2019-06-30     B   after   286249\n",
       "\n",
       "[362 rows x 4 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10c6d9d8",
   "metadata": {},
   "source": [
    "## Ranking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "64870e39",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_r = df_t.drop(['period', 'date'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "16ff59ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1580.1929719520037, 1515.9085315000937)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_r[df_r.group == 'A'].traffic.std(), df_r[df_r.group == 'B'].traffic.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f3e4d569",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_r.loc[df_r.group == 'A','rank'] = df_r[df_r.group == 'A'].traffic.rank()\n",
    "df_r.loc[df_r.group == 'B','rank'] = df_r[df_r.group == 'B'].traffic.rank()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a960b996",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(52.394232082888244, 52.39425859131259)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_r[df_r.group == 'A']['rank'].std(), df_r[df_r.group == 'B']['rank'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d28c3d91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=184.50651285172054, pvalue=0.0) \n",
      " Ttest_indResult(statistic=0.0, pvalue=1.0)\n"
     ]
    }
   ],
   "source": [
    "ttest = ttest_ind(\n",
    "    df_r[df_r.group == 'A'].traffic, \n",
    "    df_r[df_r.group == 'B'].traffic,\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "ttest_r = ttest_ind(\n",
    "    df_r[df_r.group == 'A']['rank'], \n",
    "    df_r[df_r.group == 'B']['rank'],\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "# mwtest = mannwhitneyu(\n",
    "#     df_r[df_r.group == 'A'].traffic, \n",
    "#     df_r[df_r.group == 'B'].traffic\n",
    "# #     nan_policy='propagate',\n",
    "# #     alternative='two-sided'\n",
    "# )\n",
    "print(ttest,'\\n', ttest_r)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44b0f3d3",
   "metadata": {},
   "source": [
    "## Logarithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c161d91f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "19923ff8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_l = df_t.drop(['period', 'date'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "0dbe5e24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1580.1929719520037, 1515.9085315000937)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_l[df_l.group == 'A'].traffic.std(), df_l[df_l.group == 'B'].traffic.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c2ae3a69",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_l.loc[df_l.group == 'A','log'] = df_l[df_l.group == 'A'].traffic.map(lambda x: math.log(x))\n",
    "df_l.loc[df_l.group == 'B','log'] = df_l[df_l.group == 'B'].traffic.map(lambda x: math.log(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b2622161",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.005043196931512086, 0.005342855445805235)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_l[df_l.group == 'A']['log'].std(), df_l[df_l.group == 'B']['log'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "41c60d66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=184.50651285172054, pvalue=0.0) \n",
      " Ttest_indResult(statistic=184.29164398232777, pvalue=0.0)\n"
     ]
    }
   ],
   "source": [
    "ttest = ttest_ind(\n",
    "    df_l[df_l.group == 'A'].traffic, \n",
    "    df_l[df_l.group == 'B'].traffic,\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "\n",
    "ttest_l = ttest_ind(\n",
    "    df_l[df_l.group == 'A']['log'], \n",
    "    df_l[df_l.group == 'B']['log'],\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "# mwtest = mannwhitneyu(\n",
    "#     df_r[df_r.group == 'A'].traffic, \n",
    "#     df_r[df_r.group == 'B'].traffic\n",
    "# #     nan_policy='propagate',\n",
    "# #     alternative='two-sided'\n",
    "# )\n",
    "print(ttest,'\\n',ttest_l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df615252",
   "metadata": {},
   "source": [
    "## Normalisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "c018c8ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_norm = df_t.drop(['period', 'date'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "54828ad0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459.7988793039913, 1484.1835501369897)"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm[df_norm.group == 'A'].traffic.std(), df_norm[df_norm.group == 'B'].traffic.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4b57bdaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "grp_a_max = df_norm[df_norm.group == 'A'].traffic.max()\n",
    "grp_a_min = df_norm[df_norm.group == 'A'].traffic.min()\n",
    "grp_b_max = df_norm[df_norm.group == 'B'].traffic.max()\n",
    "grp_b_min = df_norm[df_norm.group == 'B'].traffic.min()\n",
    "df_norm.loc[\n",
    "    df_norm.group == 'A','norm'\n",
    "] = df_norm[df_norm.group == 'A'].traffic.map(lambda x: (x-grp_a_min)/(grp_a_max - grp_a_min))\n",
    "df_norm.loc[\n",
    "    df_norm.group == 'B','norm'\n",
    "] = df_norm[df_norm.group == 'B'].traffic.map(lambda x: (x-grp_b_min)/(grp_b_max - grp_b_min))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ef6e3425",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1772311543239125, 0.18237590609962626)"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_norm[df_norm.group == 'A']['norm'].std(), df_norm[df_norm.group == 'B']['norm'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "20ed2df3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=184.50651285172054, pvalue=0.0) \n",
      " Ttest_indResult(statistic=6.262620131684391, pvalue=1.079203162026589e-09)\n"
     ]
    }
   ],
   "source": [
    "ttest = ttest_ind(\n",
    "    df_norm[df_norm.group == 'A'].traffic, \n",
    "    df_norm[df_norm.group == 'B'].traffic,\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "ttest_norm = ttest_ind(\n",
    "    df_norm[df_norm.group == 'A']['norm'], \n",
    "    df_norm[df_norm.group == 'B']['norm'],\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "mwtest = mannwhitneyu(\n",
    "    df_r[df_r.group == 'A'].traffic, \n",
    "    df_r[df_r.group == 'B'].traffic\n",
    "#     nan_policy='propagate',\n",
    "#     alternative='two-sided'\n",
    ")\n",
    "print(ttest,'\\n',ttest_norm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7e1adce",
   "metadata": {},
   "source": [
    "## Standartization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ac779df0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_st = df_t.drop(['period', 'date'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e3748679",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1580.1929719520037, 1515.9085315000937)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_st[df_st.group == 'A'].traffic.std(), df_st[df_st.group == 'B'].traffic.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6c233e06",
   "metadata": {},
   "outputs": [],
   "source": [
    "grp_a_std = df_st[df_st.group == 'A'].traffic.std()\n",
    "grp_a_mean = df_st[df_st.group == 'A'].traffic.mean()\n",
    "grp_b_std = df_st[df_st.group == 'B'].traffic.std()\n",
    "grp_b_mean = df_st[df_st.group == 'B'].traffic.mean()\n",
    "df_st.loc[\n",
    "    df_st.group == 'A','st'\n",
    "] = df_st[df_st.group == 'A'].traffic.map(lambda x: (x-grp_a_mean)/ grp_a_std)\n",
    "df_st.loc[\n",
    "    df_st.group == 'B','st'\n",
    "] = df_st[df_st.group == 'B'].traffic.map(lambda x: (x-grp_b_std)/grp_b_std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2fcf29b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0000000000000002, 1.0)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_st[df_st.group == 'A']['st'].std(), df_st[df_st.group == 'B']['st'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "f4e5b9e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ttest_indResult(statistic=184.50651285172054, pvalue=0.0) \n",
      " Ttest_indResult(statistic=-1770.4230634133644, pvalue=0.0)\n",
      "MannwhitneyuResult(statistic=0.0, pvalue=3.9221177648070366e-61) \n",
      " MannwhitneyuResult(statistic=0.0, pvalue=3.9221177648070366e-61)\n"
     ]
    }
   ],
   "source": [
    "ttest = ttest_ind(\n",
    "    df_st[df_st.group == 'A'].traffic, \n",
    "    df_st[df_st.group == 'B'].traffic,\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "ttest_st = ttest_ind(\n",
    "    df_st[df_st.group == 'A']['st'], \n",
    "    df_st[df_st.group == 'B']['st'],\n",
    "    equal_var=True,\n",
    "    nan_policy='propagate',\n",
    "    alternative='two-sided'\n",
    ")\n",
    "mwtest = mannwhitneyu(\n",
    "    df_st[df_st.group == 'A'].traffic, \n",
    "    df_st[df_st.group == 'B'].traffic\n",
    "#     nan_policy='propagate',\n",
    "#     alternative='two-sided'\n",
    ")\n",
    "mwtest_st = mannwhitneyu(\n",
    "    df_st[df_st.group == 'A']['st'], \n",
    "    df_st[df_st.group == 'B']['st']\n",
    "#     nan_policy='propagate',\n",
    "#     alternative='two-sided'\n",
    ")\n",
    "print(ttest,'\\n',ttest_st)\n",
    "print(mwtest,'\\n',mwtest_st)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f487e13",
   "metadata": {},
   "source": [
    "## Linearization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "20c6b940",
   "metadata": {},
   "outputs": [],
   "source": [
    "def linearize_data(generated_df):\n",
    "    ''' Функция, осуществляющая линеаризацию на сгенерированных данных '''\n",
    "\n",
    "    # Для проведения линеаризации добавим дополнительный столбец is_pilot - индикатор для обозначения пилотного периода\n",
    "    # в новый датафрейм pre_linearized_df.\n",
    "    pre_linearized_df = pd.concat([generated_df, pd.Series(np.zeros(len(generated_df))).map(int).rename('is_pilot')], axis=1)\n",
    "\n",
    "    pre_linearized_df.loc[pre_linearized_df.date >= '2019-04-01', 'is_pilot'] =  1\n",
    "\n",
    "    # Вычислим средние значения трафика до и во время пилотного периода для каждого магазина в mean_by_is_pilot\n",
    "    mean_by_is_pilot = pre_linearized_df.groupby(['id', 'is_pilot']).mean().reset_index()\n",
    "\n",
    "    # Оставим в новом датафрейме mean_not_pilot средние значения трафика в магазинах до пилотного периода.\n",
    "    mean_not_pilot = mean_by_is_pilot[mean_by_is_pilot['is_pilot'] == 0]\n",
    "    mean_not_pilot = mean_not_pilot.assign(mean_traffic = np.array(mean_not_pilot['traffic'].map(int)))\n",
    "    mean_not_pilot = mean_not_pilot.drop(['traffic', 'is_pilot'], axis = 1)  # Убираем лишние столбцы\n",
    "\n",
    "    # Соединяем сгенерированный датафрейм со столбцом is_pilot (pre_linearized_df) с полученным датафреймом значений\n",
    "    # среднего трафика магазинов до пилотного периода.\n",
    "    linearized_df = pd.merge(pre_linearized_df, mean_not_pilot, left_on = 'id', right_on = 'id', how = 'left', sort = False)\n",
    "\n",
    "    # Проводим линеаризацию, вычитая средние значения \"до\"-пилотного периода из сгенерированных значений трафика в\n",
    "    # пилотном периоде для каждого магазина.\n",
    "    linearized_df.loc[linearized_df.is_pilot == 1, 'traffic'] =  linearized_df['traffic'] - linearized_df['mean_traffic']\n",
    "    \n",
    "    # Убираем лишние столбцы из датафрейма линеаризованного трафика, а также значения \"до\"-пилотного периода\n",
    "    linearized_df = linearized_df[linearized_df['is_pilot']== 1].drop(['is_pilot','mean_traffic'],axis = 1) \n",
    "    \n",
    "    return linearized_df "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "66ac8ee2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>traffic</th>\n",
       "      <th>period</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77735080</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>595</td>\n",
       "      <td>before</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77735080</td>\n",
       "      <td>2019-01-02</td>\n",
       "      <td>665</td>\n",
       "      <td>before</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>77735080</td>\n",
       "      <td>2019-01-03</td>\n",
       "      <td>516</td>\n",
       "      <td>before</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>77735080</td>\n",
       "      <td>2019-01-04</td>\n",
       "      <td>615</td>\n",
       "      <td>before</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77735080</td>\n",
       "      <td>2019-01-05</td>\n",
       "      <td>500</td>\n",
       "      <td>before</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180995</th>\n",
       "      <td>29515796</td>\n",
       "      <td>2019-06-26</td>\n",
       "      <td>681</td>\n",
       "      <td>after</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180996</th>\n",
       "      <td>29515796</td>\n",
       "      <td>2019-06-27</td>\n",
       "      <td>629</td>\n",
       "      <td>after</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180997</th>\n",
       "      <td>29515796</td>\n",
       "      <td>2019-06-28</td>\n",
       "      <td>538</td>\n",
       "      <td>after</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180998</th>\n",
       "      <td>29515796</td>\n",
       "      <td>2019-06-29</td>\n",
       "      <td>492</td>\n",
       "      <td>after</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180999</th>\n",
       "      <td>29515796</td>\n",
       "      <td>2019-06-30</td>\n",
       "      <td>652</td>\n",
       "      <td>after</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              id       date  traffic  period group\n",
       "0       77735080 2019-01-01      595  before     B\n",
       "1       77735080 2019-01-02      665  before     B\n",
       "2       77735080 2019-01-03      516  before     B\n",
       "3       77735080 2019-01-04      615  before     B\n",
       "4       77735080 2019-01-05      500  before     B\n",
       "...          ...        ...      ...     ...   ...\n",
       "180995  29515796 2019-06-26      681   after     A\n",
       "180996  29515796 2019-06-27      629   after     A\n",
       "180997  29515796 2019-06-28      538   after     A\n",
       "180998  29515796 2019-06-29      492   after     A\n",
       "180999  29515796 2019-06-30      652   after     A\n",
       "\n",
       "[181000 rows x 5 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generated_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "9555dfb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>traffic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>1580.192972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>1515.908532</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group      traffic\n",
       "0     A  1580.192972\n",
       "1     B  1515.908532"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.groupby('group').agg({'traffic': np.std}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ad2f19c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "lin_dt = linearize_data(generated_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "ab6baca5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>traffic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>68.483111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>68.481228</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  group    traffic\n",
       "0     A  68.483111\n",
       "1     B  68.481228"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lin_dt.groupby('group').agg({'traffic': np.std}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7497c300",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
